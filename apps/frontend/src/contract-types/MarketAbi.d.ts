/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.92.1
  Forc version: 0.61.2
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export enum ErrorInput { AlreadyInitialized = 'AlreadyInitialized', Paused = 'Paused', Unauthorized = 'Unauthorized', InsufficientReserves = 'InsufficientReserves', NotLiquidatable = 'NotLiquidatable', NotForSale = 'NotForSale', TooMuchSlippage = 'TooMuchSlippage', SupplyCapExceeded = 'SupplyCapExceeded', NotCollateralized = 'NotCollateralized', BorrowTooSmall = 'BorrowTooSmall', NotPermitted = 'NotPermitted', InvalidPayment = 'InvalidPayment', UnknownAsset = 'UnknownAsset', DebuggingDisabled = 'DebuggingDisabled', NotYetActive = 'NotYetActive', AlreadyActive = 'AlreadyActive', OracleContractIdNotSet = 'OracleContractIdNotSet' };
export enum ErrorOutput { AlreadyInitialized = 'AlreadyInitialized', Paused = 'Paused', Unauthorized = 'Unauthorized', InsufficientReserves = 'InsufficientReserves', NotLiquidatable = 'NotLiquidatable', NotForSale = 'NotForSale', TooMuchSlippage = 'TooMuchSlippage', SupplyCapExceeded = 'SupplyCapExceeded', NotCollateralized = 'NotCollateralized', BorrowTooSmall = 'BorrowTooSmall', NotPermitted = 'NotPermitted', InvalidPayment = 'InvalidPayment', UnknownAsset = 'UnknownAsset', DebuggingDisabled = 'DebuggingDisabled', NotYetActive = 'NotYetActive', AlreadyActive = 'AlreadyActive', OracleContractIdNotSet = 'OracleContractIdNotSet' };

export type AbsorbCollateralEventInput = { address: AddressInput, asset_id: string, amount: BigNumberish, seize_value: BigNumberish, decimals: BigNumberish };
export type AbsorbCollateralEventOutput = { address: AddressOutput, asset_id: string, amount: BN, seize_value: BN, decimals: number };
export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type BuyCollateralEventInput = { caller: AddressInput, recipient: AddressInput, asset_id: string, amount: BigNumberish, price: BigNumberish };
export type BuyCollateralEventOutput = { caller: AddressOutput, recipient: AddressOutput, asset_id: string, amount: BN, price: BN };
export type CollateralAssetAddedInput = { asset_id: string, configuration: CollateralConfigurationInput };
export type CollateralAssetAddedOutput = { asset_id: string, configuration: CollateralConfigurationOutput };
export type CollateralAssetPausedInput = { asset_id: string };
export type CollateralAssetPausedOutput = CollateralAssetPausedInput;
export type CollateralAssetResumedInput = { asset_id: string };
export type CollateralAssetResumedOutput = CollateralAssetResumedInput;
export type CollateralAssetUpdatedInput = { asset_id: string, configuration: CollateralConfigurationInput };
export type CollateralAssetUpdatedOutput = { asset_id: string, configuration: CollateralConfigurationOutput };
export type CollateralConfigurationInput = { asset_id: string, price_feed_id: string, decimals: BigNumberish, borrow_collateral_factor: BigNumberish, liquidate_collateral_factor: BigNumberish, liquidation_penalty: BigNumberish, supply_cap: BigNumberish, paused: boolean };
export type CollateralConfigurationOutput = { asset_id: string, price_feed_id: string, decimals: number, borrow_collateral_factor: BN, liquidate_collateral_factor: BN, liquidation_penalty: BN, supply_cap: BN, paused: boolean };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type I256Input = { value: BigNumberish, negative: boolean };
export type I256Output = { value: BN, negative: boolean };
export type MarketBasicEventInput = { market_basic: MarketBasicsInput };
export type MarketBasicEventOutput = { market_basic: MarketBasicsOutput };
export type MarketBasicsInput = { base_supply_index: BigNumberish, base_borrow_index: BigNumberish, tracking_supply_index: BigNumberish, tracking_borrow_index: BigNumberish, total_supply_base: BigNumberish, total_borrow_base: BigNumberish, last_accrual_time: BigNumberish };
export type MarketBasicsOutput = { base_supply_index: BN, base_borrow_index: BN, tracking_supply_index: BN, tracking_borrow_index: BN, total_supply_base: BN, total_borrow_base: BN, last_accrual_time: BN };
export type MarketConfigurationInput = { governor: AddressInput, pause_guardian: AddressInput, base_token: string, base_token_decimals: BigNumberish, base_token_price_feed_id: string, supply_kink: BigNumberish, borrow_kink: BigNumberish, supply_per_second_interest_rate_slope_low: BigNumberish, supply_per_second_interest_rate_slope_high: BigNumberish, supply_per_second_interest_rate_base: BigNumberish, borrow_per_second_interest_rate_slope_low: BigNumberish, borrow_per_second_interest_rate_slope_high: BigNumberish, borrow_per_second_interest_rate_base: BigNumberish, store_front_price_factor: BigNumberish, base_tracking_index_scale: BigNumberish, base_tracking_supply_speed: BigNumberish, base_tracking_borrow_speed: BigNumberish, base_min_for_rewards: BigNumberish, base_borrow_min: BigNumberish, target_reserves: BigNumberish, debug_step: BigNumberish, fuel_eth_base_asset_id: string };
export type MarketConfigurationOutput = { governor: AddressOutput, pause_guardian: AddressOutput, base_token: string, base_token_decimals: number, base_token_price_feed_id: string, supply_kink: BN, borrow_kink: BN, supply_per_second_interest_rate_slope_low: BN, supply_per_second_interest_rate_slope_high: BN, supply_per_second_interest_rate_base: BN, borrow_per_second_interest_rate_slope_low: BN, borrow_per_second_interest_rate_slope_high: BN, borrow_per_second_interest_rate_base: BN, store_front_price_factor: BN, base_tracking_index_scale: BN, base_tracking_supply_speed: BN, base_tracking_borrow_speed: BN, base_min_for_rewards: BN, base_borrow_min: BN, target_reserves: BN, debug_step: BN, fuel_eth_base_asset_id: string };
export type PauseConfigurationInput = { supply_paused: boolean, withdraw_paused: boolean, absorb_paused: boolean, buy_paused: boolean };
export type PauseConfigurationOutput = PauseConfigurationInput;
export type PauseConfigurationEventInput = { pause_config: PauseConfigurationInput };
export type PauseConfigurationEventOutput = { pause_config: PauseConfigurationOutput };
export type PriceInput = { confidence: BigNumberish, exponent: BigNumberish, price: BigNumberish, publish_time: BigNumberish };
export type PriceOutput = { confidence: BN, exponent: number, price: BN, publish_time: BN };
export type ReservesWithdrawnEventInput = { address: AddressInput, amount: BigNumberish };
export type ReservesWithdrawnEventOutput = { address: AddressOutput, amount: BN };
export type UserBasicInput = { principal: I256Input, base_tracking_index: BigNumberish, base_tracking_accrued: BigNumberish };
export type UserBasicOutput = { principal: I256Output, base_tracking_index: BN, base_tracking_accrued: BN };
export type UserBasicEventInput = { address: AddressInput, user_basic: UserBasicInput };
export type UserBasicEventOutput = { address: AddressOutput, user_basic: UserBasicOutput };
export type UserLiquidatedEventInput = { address: AddressInput, liquidator: AddressInput, base_paid_out: BigNumberish, base_paid_out_value: BigNumberish, total_base: BigNumberish, total_base_value: BigNumberish, decimals: BigNumberish };
export type UserLiquidatedEventOutput = { address: AddressOutput, liquidator: AddressOutput, base_paid_out: BN, base_paid_out_value: BN, total_base: BN, total_base_value: BN, decimals: number };
export type UserSupplyBaseEventInput = { address: AddressInput, supply_amount: BigNumberish, repay_amount: BigNumberish };
export type UserSupplyBaseEventOutput = { address: AddressOutput, supply_amount: BN, repay_amount: BN };
export type UserSupplyCollateralEventInput = { address: AddressInput, asset_id: string, amount: BigNumberish };
export type UserSupplyCollateralEventOutput = { address: AddressOutput, asset_id: string, amount: BN };
export type UserWithdrawBaseEventInput = { address: AddressInput, withdraw_amount: BigNumberish, borrow_amount: BigNumberish };
export type UserWithdrawBaseEventOutput = { address: AddressOutput, withdraw_amount: BN, borrow_amount: BN };
export type UserWithdrawCollateralEventInput = { address: AddressInput, asset_id: string, amount: BigNumberish };
export type UserWithdrawCollateralEventOutput = { address: AddressOutput, asset_id: string, amount: BN };

export type MarketAbiConfigurables = {
  GOVERNOR: AddressInput;
  PAUSE_GUARDIAN: AddressInput;
  BASE_TOKEN: string;
  BASE_TOKEN_DECIMALS: BigNumberish;
  BASE_TOKEN_PRICE_FEED_ID: string;
  SUPPLY_KINK: BigNumberish;
  BORROW_KINK: BigNumberish;
  SUPPLY_PER_SECOND_INTEREST_RATE_SLOPE_LOW: BigNumberish;
  SUPPLY_PER_SECOND_INTEREST_RATE_SLOPE_HIGH: BigNumberish;
  SUPPLY_PER_SECOND_INTEREST_RATE_BASE: BigNumberish;
  BORROW_PER_SECOND_INTEREST_RATE_SLOPE_LOW: BigNumberish;
  BORROW_PER_SECOND_INTEREST_RATE_SLOPE_HIGH: BigNumberish;
  BORROW_PER_SECOND_INTEREST_RATE_BASE: BigNumberish;
  STORE_FRONT_PRICE_FACTOR: BigNumberish;
  BASE_TRACKING_INDEX_SCALE: BigNumberish;
  BASE_TRACKING_SUPPLY_SPEED: BigNumberish;
  BASE_TRACKING_BORROW_SPEED: BigNumberish;
  BASE_MIN_FOR_REWARDS: BigNumberish;
  BASE_BORROW_MIN: BigNumberish;
  TARGET_RESERVES: BigNumberish;
  DEBUG_STEP: BigNumberish;
  FUEL_ETH_BASE_ASSET_ID: string;
};

interface MarketAbiInterface extends Interface {
  functions: {
    absorb: FunctionFragment;
    activate_contract: FunctionFragment;
    add_collateral_asset: FunctionFragment;
    available_to_borrow: FunctionFragment;
    balance_of: FunctionFragment;
    buy_collateral: FunctionFragment;
    collateral_value_to_sell: FunctionFragment;
    debug_increment_timestamp: FunctionFragment;
    get_borrow_rate: FunctionFragment;
    get_collateral_configurations: FunctionFragment;
    get_collateral_reserves: FunctionFragment;
    get_configuration: FunctionFragment;
    get_market_basics: FunctionFragment;
    get_price: FunctionFragment;
    get_reserves: FunctionFragment;
    get_supply_rate: FunctionFragment;
    get_user_basic: FunctionFragment;
    get_user_collateral: FunctionFragment;
    get_user_supply_borrow: FunctionFragment;
    get_utilization: FunctionFragment;
    is_liquidatable: FunctionFragment;
    pause: FunctionFragment;
    pause_collateral_asset: FunctionFragment;
    quote_collateral: FunctionFragment;
    resume_collateral_asset: FunctionFragment;
    set_pyth_contract_id: FunctionFragment;
    supply_base: FunctionFragment;
    supply_collateral: FunctionFragment;
    totals_collateral: FunctionFragment;
    update_collateral_asset: FunctionFragment;
    update_fee: FunctionFragment;
    update_price_feeds: FunctionFragment;
    withdraw_base: FunctionFragment;
    withdraw_collateral: FunctionFragment;
    withdraw_reserves: FunctionFragment;
  };
}

export class MarketAbi extends Contract {
  interface: MarketAbiInterface;
  functions: {
    absorb: InvokeFunction<[accounts: Vec<AddressInput>], void>;
    activate_contract: InvokeFunction<[], void>;
    add_collateral_asset: InvokeFunction<[configuration: CollateralConfigurationInput], void>;
    available_to_borrow: InvokeFunction<[account: AddressInput], BN>;
    balance_of: InvokeFunction<[asset: string], BN>;
    buy_collateral: InvokeFunction<[asset_id: string, min_amount: BigNumberish, recipient: AddressInput], void>;
    collateral_value_to_sell: InvokeFunction<[asset_id: string, collateral_amount: BigNumberish], BN>;
    debug_increment_timestamp: InvokeFunction<[], void>;
    get_borrow_rate: InvokeFunction<[utilization: BigNumberish], BN>;
    get_collateral_configurations: InvokeFunction<[], Vec<CollateralConfigurationOutput>>;
    get_collateral_reserves: InvokeFunction<[asset_id: string], I256Output>;
    get_configuration: InvokeFunction<[], MarketConfigurationOutput>;
    get_market_basics: InvokeFunction<[], MarketBasicsOutput>;
    get_price: InvokeFunction<[price_feed_id: string], PriceOutput>;
    get_reserves: InvokeFunction<[], I256Output>;
    get_supply_rate: InvokeFunction<[utilization: BigNumberish], BN>;
    get_user_basic: InvokeFunction<[account: AddressInput], UserBasicOutput>;
    get_user_collateral: InvokeFunction<[address: AddressInput, asset_id: string], BN>;
    get_user_supply_borrow: InvokeFunction<[account: AddressInput], [BN, BN]>;
    get_utilization: InvokeFunction<[], BN>;
    is_liquidatable: InvokeFunction<[account: AddressInput], boolean>;
    pause: InvokeFunction<[pause_config: PauseConfigurationInput], void>;
    pause_collateral_asset: InvokeFunction<[asset_id: string], void>;
    quote_collateral: InvokeFunction<[asset_id: string, base_amount: BigNumberish], BN>;
    resume_collateral_asset: InvokeFunction<[asset_id: string], void>;
    set_pyth_contract_id: InvokeFunction<[contract_id: ContractIdInput], void>;
    supply_base: InvokeFunction<[], void>;
    supply_collateral: InvokeFunction<[], void>;
    totals_collateral: InvokeFunction<[asset_id: string], BN>;
    update_collateral_asset: InvokeFunction<[asset_id: string, configuration: CollateralConfigurationInput], void>;
    update_fee: InvokeFunction<[update_data: Vec<Bytes>], BN>;
    update_price_feeds: InvokeFunction<[update_fee: BigNumberish, update_data: Vec<Bytes>], void>;
    withdraw_base: InvokeFunction<[amount: BigNumberish], void>;
    withdraw_collateral: InvokeFunction<[asset_id: string, amount: BigNumberish], void>;
    withdraw_reserves: InvokeFunction<[to: AddressInput, amount: BigNumberish], void>;
  };
}

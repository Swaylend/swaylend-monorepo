
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'






@Entity("MarketConfiguration")
export class MarketConfiguration extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	chainId: String

	@Required
	@Column("String")
	contractAddress: String

	@Required
	@Column("String")
	baseTokenAddress: String

	@Required
	@Column("Int")
	baseTokenDecimals: Int
  constructor(data: Partial<MarketConfiguration>) {super()}
}

@Entity("CollateralConfiguration")
export class CollateralConfiguration extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	chainId: String

	@Required
	@Column("String")
	contractAddress: String

	@Required
	@Column("String")
	assetAddress: String

	@Required
	@Column("Int")
	decimals: Int
  constructor(data: Partial<CollateralConfiguration>) {super()}
}

@Entity("Pool")
export class Pool extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	chainId: String

	@Required
	@Column("Int")
	creationBlockNumber: Int

	@Required
	@Column("Int")
	creationTimestamp: Int

	@Required
	@Column("String")
	underlyingTokenAddress: String

	@Required
	@Column("String")
	underlyingTokenSymbol: String

	@Required
	@Column("String")
	receiptTokenAddress: String

	@Required
	@Column("String")
	receiptTokenSymbol: String

	@Required
	@Column("String")
	poolAddress: String

	@Required
	@Column("String")
	poolType: String
  constructor(data: Partial<Pool>) {super()}
}

@Entity("PositionSnapshot")
export class PositionSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("String")
	chainId: String

	@Required
	@Column("String")
	poolAddress: String

	@Required
	@Column("String")
	underlyingTokenAddress: String

	@Required
	@Column("String")
	underlyingTokenSymbol: String

	@Required
	@Column("String")
	userAddress: String

	@Required
	@Column("BigInt")
	suppliedAmount: BigInt

	@Column("BigInt")
	suppliedAmountUsd?: BigInt

	@Required
	@Column("BigInt")
	borrowedAmount: BigInt

	@Column("BigInt")
	borrowedAmountUsd?: BigInt

	@Required
	@Column("BigInt")
	collateralAmount: BigInt

	@Column("BigInt")
	collateralAmountUsd?: BigInt
  constructor(data: Partial<PositionSnapshot>) {super()}
}

@Entity("PoolSnapshot")
export class PoolSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("String")
	chainId: String

	@Required
	@Column("String")
	poolAddress: String

	@Required
	@Column("String")
	underlyingTokenAddress: String

	@Required
	@Column("String")
	underlyingTokenSymbol: String

	@Column("BigInt")
	underlyingTokenPriceUsd?: BigInt

	@Required
	@Column("BigInt")
	availableAmount: BigInt

	@Column("BigInt")
	availableAmountUsd?: BigInt

	@Required
	@Column("BigInt")
	suppliedAmount: BigInt

	@Column("BigInt")
	suppliedAmountUsd?: BigInt

	@Column("BigInt")
	nonRecursiveSuppliedAmount?: BigInt

	@Column("BigInt")
	collateralAmount?: BigInt

	@Column("BigInt")
	collateralAmountUsd?: BigInt

	@Required
	@Column("BigInt")
	collateralFactor: BigInt

	@Required
	@Column("BigInt")
	supplyIndex: BigInt

	@Required
	@Column("BigInt")
	supplyApr: BigInt

	@Required
	@Column("BigInt")
	borrowedAmount: BigInt

	@Column("BigInt")
	borrowedAmountUsd?: BigInt

	@Required
	@Column("BigInt")
	borrowIndex: BigInt

	@Required
	@Column("BigInt")
	borrowApr: BigInt

	@Column("BigInt")
	totalFeesUsd?: BigInt

	@Column("BigInt")
	userFeesUsd?: BigInt

	@Column("BigInt")
	protocolFeesUsd?: BigInt
  constructor(data: Partial<PoolSnapshot>) {super()}
}


const source = `type MarketConfiguration @entity {
    id: ID!
    chainId: String!
    contractAddress: String!
    baseTokenAddress: String!
    baseTokenDecimals: Int!
}

type CollateralConfiguration @entity {
    id: ID!
    chainId: String!
    contractAddress: String!
    assetAddress: String!
    decimals: Int!
}

type Pool @entity {
    id: ID! # Constructed as chainId_poolAddress_underlyingTokenAddress
    chainId: String!
    creationBlockNumber: Int!
    creationTimestamp: Int!
    underlyingTokenAddress: String! # Address of the underlying token (collateral, base)
    underlyingTokenSymbol: String!
    receiptTokenAddress: String!
    receiptTokenSymbol: String!
    poolAddress: String! # Contract address of the pool (market)
    poolType: String! # collteral_only or supply_only
}

type PositionSnapshot @entity {
    id: ID!
    timestamp: Int!
    chainId: String!
    poolAddress: String!
    underlyingTokenAddress: String!
    underlyingTokenSymbol: String!
    userAddress: String!
    suppliedAmount: BigInt!
    suppliedAmountUsd: BigInt
    borrowedAmount: BigInt!
    borrowedAmountUsd: BigInt
    collateralAmount: BigInt!
    collateralAmountUsd: BigInt
}

type PoolSnapshot @entity {
    id: ID!
    timestamp: Int!
    chainId: String!
    poolAddress: String!
    underlyingTokenAddress: String!
    underlyingTokenSymbol: String!
    underlyingTokenPriceUsd: BigInt
    availableAmount: BigInt!
    availableAmountUsd: BigInt
    suppliedAmount: BigInt!
    suppliedAmountUsd: BigInt
    nonRecursiveSuppliedAmount: BigInt
    collateralAmount: BigInt
    collateralAmountUsd: BigInt
    collateralFactor: BigInt!
    supplyIndex: BigInt!
    supplyApr: BigInt!
    borrowedAmount: BigInt!
    borrowedAmountUsd: BigInt
    borrowIndex: BigInt!
    borrowApr: BigInt!
    totalFeesUsd: BigInt
    userFeesUsd: BigInt
    protocolFeesUsd: BigInt
}`
DatabaseSchema.register({
  source,
  entities: {
    "MarketConfiguration": MarketConfiguration,
		"CollateralConfiguration": CollateralConfiguration,
		"Pool": Pool,
		"PositionSnapshot": PositionSnapshot,
		"PoolSnapshot": PoolSnapshot
  }
})

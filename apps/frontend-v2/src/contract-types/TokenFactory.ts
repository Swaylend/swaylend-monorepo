/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.1
*/

import { ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { Token } from "./Token";

const bytecode = decompressBytecode("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");

export class TokenFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, Token.abi, accountOrProvider);
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<Token>> {
    const factory = new TokenFactory(wallet);

    return factory.deploy({
      storageSlots: Token.storageSlots,
      ...options,
    });
  }
}

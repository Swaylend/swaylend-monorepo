/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.1
*/

import { ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { TestProject } from "./TestProject";

const bytecode = decompressBytecode("H4sIAM2DzGYAA6VWUWhbVRj+k96s6abdwaYQb5XeaTrvpmLUdnQo7F6SkMQs5IxuWJHLLcjQPThjmGMwcBdE8UGwE9Q9+BCZzoE+3KR5GOhDYO+SN/GtgoMVG8hLoWUP9Tvn3LRpkhbEQDjn3PP///n/7//+/xy9k6QrRGGSv8OrznYzxLa3xTfS1zndJK3lpDqjzKamnl6iSi7MWSbm6WuMjM1XafHRapg/WtWuUOglPdsiXvCZ22Zhnm1Q5SxFzUyiq5fbR+9YoMehdxh6ya6emA+RN/QC5Eu+WeGQK06S2zYO8YVGs3KemHluznKKjFhx1nMzSYKNJi81OGSZkMWa81I9113ra8l++3HpT8mPw58R2NagE63kIJ+Z9cTcbRNVLMIehXjKfyj3Ug2PF+rvwXdm5mPwvX5NzjNaU18zSH8wEMe4nmrRVYtCwPrC3r3wrNirpDU6nkYe0mWBTxn+jItvGI+668R41t/EGXGJVaF2T87l2f5897uz4I86JT/qZP0x+Bll+Zg3mU80r+bkuRF8C08Bq+Nnicyn05bOy8TyacvNyxijzI4Bsxpyaj3jtpPPIuYET9WWoRc37ZjAY17OM5rHU415+NGqpIUfmgVsFuXcTlg4/wi34XOhZsL/GZ4xoirPWhN6ccgxISfmwG5R4a0N4Qv5AhucG4eth7t4+58rvBFz1n9ixmYE3sJ/EjyKQtaD70nENIbxZcRwV8rbAru60lV5u3Vw3qjak7cyzhgTZzjZzmGWYU2n0DnC8kbTKXUeY8VkE7wEx6x+Gx/oC4jhTf8WcJ2AjFlZBBbnLnjI16f4XsXaMC9EPOQ5zm0u9g3TngTG9bvAKmfa5y19jfrt/iF8Y29FCPHNQw46CQs2nucZMoGpoTi8wjDPyZwV6qbAWH9g9PPzuqrLlUXgkUM+JR59MjdkLgr1DmQMhV9tU+EG3v41wPkxlbuVKs5PKs6sVLFu9axbyJfYh6+a56T8j5HPG2I9ldc8wZmpPPiag/0c6qLUqAK/JdS+IWr/dH6OSZnMrMUyiD2zJLhShZyHmjdEzb9W1JZ1i2gGf/Dh+imMXxONfBNVPU9PVUnPrpJjY72B/xajW9j7FjJvbErZ6QFZ1IuTN8gpwib6EivOkWsnoQ8sdvWnA/3Rrv5NIta1ITnfBudT/s7ZX4n9Xf3RQP9Mjz5X+sukF2BDcLeNXP3j93MjqZeA/YLPVJ+cBH8GePmc4OUEfJ8owndOdPUsPYVemFT9MjKkX9LJwK51gF3V4xd8Q8lEhslEBTdOnJvl+oYl4ub6ltGN+8x/wC10AG7/F/edvN+k0LLUX1gFv1CvO/XkLw2vJ/opuOdEz9qnnuhnVU++4HlQTz7uwP3qieZUPdWs3fqpWViXe+rnBdTPi/vXT618Oq+10M8OoV8z9IowemVS9mP0cJwx7q4zeRdM2ZrF7AQ4sLfvfET0u/BD3odC14JuoYEehHwHfR1+HJ+wyRJ98xTeFlhHFM7Accvqr4/tHpzLO/x2PdLflvlCDDEZC8NdhnE6GCPTatSezAA7xVvUvOyH4g2Afjgn59grK1wH+HwieF8s6w9FHgf2jwV891XPmbFkzGKen7Og17ldTH+PHLZUDsX95neAM7tdTBjSD5EbG3045e/M5QgOAmsN92MEGCZNF3fHRllgVNa3lroYbQcYHe3hstHbA5BD8Q+JXCInI4LX0hdxp20wwW2jp7aO9tvr6yc7ekN0hvVMbZ+e2esvagey2c7jwZ05Lu5MeVY71oTfeHPhfSfPFu9APyfrK9sYeA+Ae3+LugriApdoj4/vXhQvWaJLl9+pXHz/4mW1Irr8+vXSpV+3P3zl/v075id3Pvsy6/928saxJffEyBd//rjqBu/he2qMwqL4jTaC8Zdg/CEYvwvMXgvG8r9RBa5OWAsAAA==");

export class TestProjectFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TestProject.abi, accountOrProvider);
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TestProject>> {
    const factory = new TestProjectFactory(wallet);

    return factory.deploy({
      storageSlots: TestProject.storageSlots,
      ...options,
    });
  }
}

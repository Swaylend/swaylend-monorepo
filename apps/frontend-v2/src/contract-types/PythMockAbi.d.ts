/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export enum PythErrorInput { FeesCanOnlyBePaidInTheBaseAsset = 'FeesCanOnlyBePaidInTheBaseAsset', FuturePriceNotAllowed = 'FuturePriceNotAllowed', GuardianSetNotFound = 'GuardianSetNotFound', IncorrectMessageType = 'IncorrectMessageType', InsufficientFee = 'InsufficientFee', InvalidArgument = 'InvalidArgument', InvalidAttestationSize = 'InvalidAttestationSize', InvalidDataSourcesLength = 'InvalidDataSourcesLength', InvalidExponent = 'InvalidExponent', InvalidGovernanceDataSource = 'InvalidGovernanceDataSource', InvalidGovernanceAction = 'InvalidGovernanceAction', InvalidGovernanceMessage = 'InvalidGovernanceMessage', InvalidGovernanceModule = 'InvalidGovernanceModule', InvalidGovernanceTarget = 'InvalidGovernanceTarget', InvalidHeaderSize = 'InvalidHeaderSize', InvalidMagic = 'InvalidMagic', InvalidMajorVersion = 'InvalidMajorVersion', InvalidMinorVersion = 'InvalidMinorVersion', InvalidPayloadId = 'InvalidPayloadId', InvalidPayloadLength = 'InvalidPayloadLength', InvalidPriceFeedDataLength = 'InvalidPriceFeedDataLength', InvalidProof = 'InvalidProof', InvalidUpdateData = 'InvalidUpdateData', InvalidUpdateDataLength = 'InvalidUpdateDataLength', InvalidUpdateDataSource = 'InvalidUpdateDataSource', InvalidUpgradeModule = 'InvalidUpgradeModule', InvalidWormholeAddressToSet = 'InvalidWormholeAddressToSet', LengthOfPriceFeedIdsAndPublishTimesMustMatch = 'LengthOfPriceFeedIdsAndPublishTimesMustMatch', NewGuardianSetIsEmpty = 'NewGuardianSetIsEmpty', NumberOfUpdatesIrretrievable = 'NumberOfUpdatesIrretrievable', OldGovernanceMessage = 'OldGovernanceMessage', OutdatedPrice = 'OutdatedPrice', PriceFeedNotFound = 'PriceFeedNotFound', PriceFeedNotFoundWithinRange = 'PriceFeedNotFoundWithinRange', WormholeGovernanceActionNotFound = 'WormholeGovernanceActionNotFound' };
export enum PythErrorOutput { FeesCanOnlyBePaidInTheBaseAsset = 'FeesCanOnlyBePaidInTheBaseAsset', FuturePriceNotAllowed = 'FuturePriceNotAllowed', GuardianSetNotFound = 'GuardianSetNotFound', IncorrectMessageType = 'IncorrectMessageType', InsufficientFee = 'InsufficientFee', InvalidArgument = 'InvalidArgument', InvalidAttestationSize = 'InvalidAttestationSize', InvalidDataSourcesLength = 'InvalidDataSourcesLength', InvalidExponent = 'InvalidExponent', InvalidGovernanceDataSource = 'InvalidGovernanceDataSource', InvalidGovernanceAction = 'InvalidGovernanceAction', InvalidGovernanceMessage = 'InvalidGovernanceMessage', InvalidGovernanceModule = 'InvalidGovernanceModule', InvalidGovernanceTarget = 'InvalidGovernanceTarget', InvalidHeaderSize = 'InvalidHeaderSize', InvalidMagic = 'InvalidMagic', InvalidMajorVersion = 'InvalidMajorVersion', InvalidMinorVersion = 'InvalidMinorVersion', InvalidPayloadId = 'InvalidPayloadId', InvalidPayloadLength = 'InvalidPayloadLength', InvalidPriceFeedDataLength = 'InvalidPriceFeedDataLength', InvalidProof = 'InvalidProof', InvalidUpdateData = 'InvalidUpdateData', InvalidUpdateDataLength = 'InvalidUpdateDataLength', InvalidUpdateDataSource = 'InvalidUpdateDataSource', InvalidUpgradeModule = 'InvalidUpgradeModule', InvalidWormholeAddressToSet = 'InvalidWormholeAddressToSet', LengthOfPriceFeedIdsAndPublishTimesMustMatch = 'LengthOfPriceFeedIdsAndPublishTimesMustMatch', NewGuardianSetIsEmpty = 'NewGuardianSetIsEmpty', NumberOfUpdatesIrretrievable = 'NumberOfUpdatesIrretrievable', OldGovernanceMessage = 'OldGovernanceMessage', OutdatedPrice = 'OutdatedPrice', PriceFeedNotFound = 'PriceFeedNotFound', PriceFeedNotFoundWithinRange = 'PriceFeedNotFoundWithinRange', WormholeGovernanceActionNotFound = 'WormholeGovernanceActionNotFound' };

export type PriceInput = { confidence: BigNumberish, exponent: BigNumberish, price: BigNumberish, publish_time: BigNumberish };
export type PriceOutput = { confidence: BN, exponent: number, price: BN, publish_time: BN };
export type PriceFeedInput = { ema_price: PriceInput, id: string, price: PriceInput };
export type PriceFeedOutput = { ema_price: PriceOutput, id: string, price: PriceOutput };

export interface PythMockAbiInterface extends Interface {
  functions: {
    ema_price: FunctionFragment;
    ema_price_no_older_than: FunctionFragment;
    ema_price_unsafe: FunctionFragment;
    parse_price_feed_updates: FunctionFragment;
    price: FunctionFragment;
    price_no_older_than: FunctionFragment;
    price_unsafe: FunctionFragment;
    update_fee: FunctionFragment;
    update_price_feeds: FunctionFragment;
    update_price_feeds_if_necessary: FunctionFragment;
    valid_time_period: FunctionFragment;
  };
}

export class PythMockAbi extends Contract {
  interface: PythMockAbiInterface;
  functions: {
    ema_price: InvokeFunction<[price_feed_id: string], PriceOutput>;
    ema_price_no_older_than: InvokeFunction<[time_period: BigNumberish, price_feed_id: string], PriceOutput>;
    ema_price_unsafe: InvokeFunction<[price_feed_id: string], PriceOutput>;
    parse_price_feed_updates: InvokeFunction<[max_publish_time: BigNumberish, min_publish_time: BigNumberish, price_feed_ids: Vec<string>, update_data: Vec<Bytes>], Vec<PriceFeedOutput>>;
    price: InvokeFunction<[price_feed_id: string], PriceOutput>;
    price_no_older_than: InvokeFunction<[time_period: BigNumberish, price_feed_id: string], PriceOutput>;
    price_unsafe: InvokeFunction<[price_feed_id: string], PriceOutput>;
    update_fee: InvokeFunction<[update_data: Vec<Bytes>], BN>;
    update_price_feeds: InvokeFunction<[update_data: Vec<Bytes>], void>;
    update_price_feeds_if_necessary: InvokeFunction<[price_feed_ids: Vec<string>, publish_times: Vec<BigNumberish>, update_data: Vec<Bytes>], void>;
    valid_time_period: InvokeFunction<[], BN>;
  };
}

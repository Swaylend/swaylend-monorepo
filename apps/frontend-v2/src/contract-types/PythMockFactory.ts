/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
*/

import { ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { PythMock } from "./PythMock";

const bytecode = decompressBytecode("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");

export class PythMockFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, PythMock.abi, accountOrProvider);
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<PythMock>> {
    const factory = new PythMockFactory(wallet);

    return factory.deploy({
      storageSlots: PythMock.storageSlots,
      ...options,
    });
  }
}
